// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: proto/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NeighborService_Communicate_FullMethodName = "/proto.NeighborService/Communicate"
)

// NeighborServiceClient is the client API for NeighborService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NeighborServiceClient interface {
	// Bidirectional streaming for communication between neighbors
	Communicate(ctx context.Context, opts ...grpc.CallOption) (NeighborService_CommunicateClient, error)
}

type neighborServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNeighborServiceClient(cc grpc.ClientConnInterface) NeighborServiceClient {
	return &neighborServiceClient{cc}
}

func (c *neighborServiceClient) Communicate(ctx context.Context, opts ...grpc.CallOption) (NeighborService_CommunicateClient, error) {
	stream, err := c.cc.NewStream(ctx, &NeighborService_ServiceDesc.Streams[0], NeighborService_Communicate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &neighborServiceCommunicateClient{stream}
	return x, nil
}

type NeighborService_CommunicateClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type neighborServiceCommunicateClient struct {
	grpc.ClientStream
}

func (x *neighborServiceCommunicateClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *neighborServiceCommunicateClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NeighborServiceServer is the server API for NeighborService service.
// All implementations must embed UnimplementedNeighborServiceServer
// for forward compatibility
type NeighborServiceServer interface {
	// Bidirectional streaming for communication between neighbors
	Communicate(NeighborService_CommunicateServer) error
	mustEmbedUnimplementedNeighborServiceServer()
}

// UnimplementedNeighborServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNeighborServiceServer struct {
}

func (UnimplementedNeighborServiceServer) Communicate(NeighborService_CommunicateServer) error {
	return status.Errorf(codes.Unimplemented, "method Communicate not implemented")
}
func (UnimplementedNeighborServiceServer) mustEmbedUnimplementedNeighborServiceServer() {}

// UnsafeNeighborServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NeighborServiceServer will
// result in compilation errors.
type UnsafeNeighborServiceServer interface {
	mustEmbedUnimplementedNeighborServiceServer()
}

func RegisterNeighborServiceServer(s grpc.ServiceRegistrar, srv NeighborServiceServer) {
	s.RegisterService(&NeighborService_ServiceDesc, srv)
}

func _NeighborService_Communicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NeighborServiceServer).Communicate(&neighborServiceCommunicateServer{stream})
}

type NeighborService_CommunicateServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type neighborServiceCommunicateServer struct {
	grpc.ServerStream
}

func (x *neighborServiceCommunicateServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *neighborServiceCommunicateServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NeighborService_ServiceDesc is the grpc.ServiceDesc for NeighborService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NeighborService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NeighborService",
	HandlerType: (*NeighborServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Communicate",
			Handler:       _NeighborService_Communicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/service.proto",
}
